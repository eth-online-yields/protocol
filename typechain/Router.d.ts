/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RouterInterface extends ethers.utils.Interface {
  functions: {
    "getProtocolForPair(address)": FunctionFragment;
    "migrate(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getProtocolForPair",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getProtocolForPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;

  events: {};
}

export class Router extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RouterInterface;

  functions: {
    getProtocolForPair(
      _pair: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getProtocolForPair(address)"(
      _pair: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    migrate(
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "migrate(address,address)"(
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getProtocolForPair(_pair: string, overrides?: CallOverrides): Promise<string>;

  "getProtocolForPair(address)"(
    _pair: string,
    overrides?: CallOverrides
  ): Promise<string>;

  migrate(
    _from: string,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "migrate(address,address)"(
    _from: string,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getProtocolForPair(
      _pair: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getProtocolForPair(address)"(
      _pair: string,
      overrides?: CallOverrides
    ): Promise<string>;

    migrate(
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "migrate(address,address)"(
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getProtocolForPair(
      _pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProtocolForPair(address)"(
      _pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "migrate(address,address)"(
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getProtocolForPair(
      _pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProtocolForPair(address)"(
      _pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "migrate(address,address)"(
      _from: string,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
